// generated by Fast Light User Interface Designer (fluid) version 1.0301

#include <FL/Fl_Group.H>
#include <FL/Fl_Float_Input.H>
#include <FL/Fl_Int_Input.H>
#include <FL/Fl_Input.H>
#include <FL/Fl_Output.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Double_Window.H>
#include <FL/Fl_Choice.H>
#include <FL/Fl_Box.H>
#include <FL/Fl.H>
#include <my/TableData.h>
#include <flx/Flx_Table.h>
#include "Vertraege.h"

using namespace my;
using namespace flx;

Fl_Group *_pTopGrp=(Fl_Group *)0;

Fl_Input *_pAuftrag=(Fl_Input *)0;

Fl_Input *_pVertrag=(Fl_Input *)0;

Fl_Group *_pDummy3=(Fl_Group *)0;

Fl_Choice *_pKunde=(Fl_Choice *)0;

Fl_Group *_pDummy=(Fl_Group *)0;

Fl_Float_Input *_pEinzelpreis=(Fl_Float_Input *)0;

Fl_Int_Input *_pAnzahl=(Fl_Int_Input *)0;

Fl_Output *_pGesamt=(Fl_Output *)0;

Fl_Float_Input *_pTagesmiete=(Fl_Float_Input *)0;

Fl_Int_Input *_pJahreLaufzeit=(Fl_Int_Input *)0;

Fl_Float_Input *_pRueckkaufswert=(Fl_Float_Input *)0;

Fl_Group *_pDummy2=(Fl_Group *)0;

Fl_Input *_pMietbeginn=(Fl_Input *)0;
Fl_Input *_pMietende=(Fl_Input *)0;

Fl_Button *_pBtnRenditeOhneSteuer=(Fl_Button *)0;

Fl_Button *_pBtnRenditeMitSteuer=(Fl_Button *)0;

Fl_Output *_pRenditeOhneSteuer=(Fl_Output *)0;

Fl_Output *_pRenditeMitSteuer=(Fl_Output *)0;

Fl_Group *_pDummy4=(Fl_Group *)0;

Fl_Button *_pBtnInListe=(Fl_Button *)0;

Fl_Button *_pBtnVertragEdit=(Fl_Button *)0;

Fl_Group *_pBottomGrp=(Fl_Group *)0;

Flx_Table *_pTable=(Flx_Table *)0;


#include "Application.h"
#include "MainWindow.h"
#include <flx/Flx_DateChooser.h>
int main__() {
    Flx_Window win( 100, 100, 500, 500, "TestCalendar" );
    Flx_DateChooser dc( 50, 10, 23, "Datum: " );
    win.end();
    win.show();
    return Fl::run();
}

#include "ContainerIO.h"
#include "Vertraege.h"
#include "Vertrag.h"
void readVertraege() {
    ContainerIO io;
    io.connect();
    Vertraege vertraege;
    io.getVertraege( vertraege );
}

void insertVertrag() {
    ContainerIO io;
    io.connect();
    Vertrag v;
    v.Vertrag.add( "GC 039421" );
    v.Angebot.add( "1026" );
    v.Kunde.add( "MK" );
    v.LfdNr = 1;
    v.Einzelpreis = 850;
    v.Menge = 13;
    v.Tagesmiete = 0.38;
    v.JahreMietdauer = 1;
    v.AfA = 12.5;
    v.Rueckkaufswert = 735;
    MyDate beginn;
    v.Mietbeginn = MyDate::FromString( beginn, "16.06.2013" );
    v.Mietende = MyDate::FromString( beginn, "15.06.2014" );
    try {
        io.insertVertrag( v );
    } catch( MySqlException ex ) {
        fprintf( stderr, "%s", ex.what() );
    }
}

void testZeitwert() {
    ContainerIO io;
    io.connect();
    WertverlustVectorPtr pWvVector = io.getWertverluste();
    
    int restwertKum = 0;
    int rueckkaufKum = 0;
    std::for_each( pWvVector->begin(), pWvVector->end(), [&restwertKum, &rueckkaufKum] (WertverlustDataPtr pWv ) {
        rueckkaufKum += pWv->Rueckkauf;
        float wertverlust = pWv->WertverlustProTag * pWv->TageRestlaufzeit;
        int restwert = pWv->Rueckkauf + wertverlust;
        restwertKum += restwert;
    } );
    
    fprintf( stderr, "Depotwert heute: %d; Summe der RÃ¼ckkaufswerte: %d\n", restwertKum, rueckkaufKum );
}

void testVertraegeIO() {
    //insertVertrag();
    //readVertraege();
    testZeitwert();
}

#include "Calculator.h"
int main() {
    //testVertraegeIO();
    Application app;
    app.init();
    app.getWindow().show();
    return Fl::run();
}

int main_(int argc, char **argv) {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window( 573, 605, "Container Kalkulation und Verwaltung" );
    w = o;
    o->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
    { _pTopGrp = new Fl_Group(10, 10, 555, 301);
      _pTopGrp->box(FL_BORDER_BOX);
      _pTopGrp->color(FL_LIGHT2);
      { Fl_Group* o = new Fl_Group(20, 22, 535, 53);
        o->box(FL_BORDER_BOX);
        o->color(FL_LIGHT2);
        o->labelcolor((Fl_Color)4);
        
        { ( new Fl_Box(46, 41, 60, 16, "Kunde:") )->labelsize( 12 );
        } // Fl_Box* o
        { _pKunde = new Fl_Choice(106, 36, 100, 25);
          _pKunde->box( FL_PLASTIC_THIN_UP_BOX );
          _pKunde->down_box( FL_PLASTIC_THIN_DOWN_BOX );
          _pKunde->add( "M" );
          _pKunde->add( "G" );
          _pKunde->add( "M+G" );
          _pKunde->value( 0 );
        } // Fl_Choice* _pKunde
        
        { ( new Fl_Box(214, 41, 60, 16, "Auftrag: ") )->labelsize( 12 );
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(380, 38, 60, 22, "Vertrag: ");
          o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          o->labelsize( 12 );
        } // Fl_Box* o
        { _pAuftrag = new Fl_Input(276, 36, 100, 25);
          _pAuftrag->box(FL_PLASTIC_THIN_DOWN_BOX);
        } // Fl_Input* _pAuftrag
        { _pVertrag = new Fl_Input(441, 36, 105, 25);
          _pVertrag->box(FL_PLASTIC_THIN_DOWN_BOX);
        } // Fl_Input* _pVertrag
        { _pDummy3 = new Fl_Group(550, 35, 5, 30);
          _pDummy3->end();
          Fl_Group::current()->resizable(_pDummy3);
        } // Fl_Group* _pDummy3

        o->end();
      } // Fl_Group* o
      { _pDummy = new Fl_Group(200, 75, 15, 15);
        _pDummy->end();
      } // Fl_Group* _pDummy
      { Fl_Group* o = new Fl_Group(20, 85, 535, 130, "Container");
        o->box(FL_BORDER_BOX);
        o->color(FL_LIGHT2);
        o->labeltype( FL_EMBOSSED_LABEL );
        o->labelfont(2);
        o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
        { (new Fl_Box(26, 118, 80, 16, "Einzelpreis: "))->labelsize(12);
        } // Fl_Box* o
        { _pEinzelpreis = new Fl_Float_Input(106, 114, 100, 25);
          _pEinzelpreis->box(FL_PLASTIC_THIN_DOWN_BOX);
          _pEinzelpreis->color(FL_BACKGROUND2_COLOR);
          _pEinzelpreis->selection_color(FL_SELECTION_COLOR);
          _pEinzelpreis->labeltype(FL_NORMAL_LABEL);
          _pEinzelpreis->labelfont(0);
          _pEinzelpreis->labelsize(14);
          _pEinzelpreis->labelcolor(FL_FOREGROUND_COLOR);
          _pEinzelpreis->align(Fl_Align(FL_ALIGN_LEFT));
          _pEinzelpreis->when(FL_WHEN_RELEASE);
        } // Fl_Float_Input* _pEinzelpreis
        { Fl_Box* o = new Fl_Box(218, 117, 59, 16, "Anzahl:");
          o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          o->labelsize( 12 );
        } // Fl_Box* o
        { _pAnzahl = new Fl_Int_Input(276, 113, 74, 25);
          _pAnzahl->box(FL_PLASTIC_THIN_DOWN_BOX);
          _pAnzahl->color(FL_BACKGROUND2_COLOR);
          _pAnzahl->selection_color(FL_SELECTION_COLOR);
          _pAnzahl->labeltype(FL_NORMAL_LABEL);
          _pAnzahl->labelfont(0);
          _pAnzahl->labelsize(14);
          _pAnzahl->labelcolor(FL_FOREGROUND_COLOR);
          _pAnzahl->align(Fl_Align(FL_ALIGN_LEFT));
          _pAnzahl->when(FL_WHEN_RELEASE);
        } // Fl_Int_Input* _pAnzahl
        { Fl_Box* o = new Fl_Box(375, 117, 64, 16, "Gesamt:");
          o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          o->labelsize( 12 );
        } // Fl_Box* o
        { _pGesamt = new Fl_Output(441, 112, 95, 25);
          _pGesamt->box(FL_PLASTIC_THIN_DOWN_BOX);
        } // Fl_Output* _pGesamt
        { ( new Fl_Box(23, 151, 80, 16, "Miete/Tag:") )->labelsize( 12 );
        } // Fl_Box* o
        { _pTagesmiete = new Fl_Float_Input(106, 147, 54, 25);
          _pTagesmiete->box(FL_PLASTIC_THIN_DOWN_BOX);
          _pTagesmiete->color(FL_BACKGROUND2_COLOR);
          _pTagesmiete->selection_color(FL_SELECTION_COLOR);
          _pTagesmiete->labeltype(FL_NORMAL_LABEL);
          _pTagesmiete->labelfont(0);
          _pTagesmiete->labelsize(14);
          _pTagesmiete->labelcolor(FL_FOREGROUND_COLOR);
          _pTagesmiete->align(Fl_Align(FL_ALIGN_LEFT));
          _pTagesmiete->when(FL_WHEN_RELEASE);
        } // Fl_Float_Input* _pTagesmiete
        { Fl_Box* o = new Fl_Box(211, 151, 59, 16, "Laufzeit:");
          o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          o->labelsize( 12 );
        } // Fl_Box* o
        { _pJahreLaufzeit = new Fl_Int_Input(276, 147, 29, 25);
          _pJahreLaufzeit->box(FL_PLASTIC_THIN_DOWN_BOX);
          _pJahreLaufzeit->color(FL_BACKGROUND2_COLOR);
          _pJahreLaufzeit->selection_color(FL_SELECTION_COLOR);
          _pJahreLaufzeit->labeltype(FL_NORMAL_LABEL);
          _pJahreLaufzeit->labelfont(0);
          _pJahreLaufzeit->labelsize(14);
          _pJahreLaufzeit->labelcolor(FL_FOREGROUND_COLOR);
          _pJahreLaufzeit->align(Fl_Align(FL_ALIGN_LEFT));
          _pJahreLaufzeit->when(FL_WHEN_RELEASE);
        } // Fl_Int_Input* _pJahreLaufzeit
        { Fl_Box* o = new Fl_Box(305, 151, 59, 16, "Jahre");
          o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          o->labelsize( 12 );
        } // Fl_Box* o
        { (new Fl_Box(363, 151, 80, 16, "R\303\274""ckkauf: ") )->labelsize( 12 );
        } // Fl_Box* o
        { _pRueckkaufswert = new Fl_Float_Input(441, 147, 95, 25);
          _pRueckkaufswert->box(FL_PLASTIC_THIN_DOWN_BOX);
          _pRueckkaufswert->color(FL_BACKGROUND2_COLOR);
          _pRueckkaufswert->selection_color(FL_SELECTION_COLOR);
          _pRueckkaufswert->labeltype(FL_NORMAL_LABEL);
          _pRueckkaufswert->labelfont(0);
          _pRueckkaufswert->labelsize(14);
          _pRueckkaufswert->labelcolor(FL_FOREGROUND_COLOR);
          _pRueckkaufswert->align(Fl_Align(FL_ALIGN_LEFT));
          _pRueckkaufswert->when(FL_WHEN_RELEASE);
        } // Fl_Float_Input* _pRueckkaufswert
        { _pDummy2 = new Fl_Group(540, 110, 15, 50);
          _pDummy2->end();
          Fl_Group::current()->resizable(_pDummy2);
        } // Fl_Group* _pDummy2
        { (new Fl_Box(26, 184, 80, 16, "Mietbeginn:") )->labelsize( 12 );
        } 
        { _pMietbeginn = new Fl_Input(106, 180, 100, 25);
          _pMietbeginn->box(FL_PLASTIC_THIN_DOWN_BOX);
          _pMietbeginn->color(FL_BACKGROUND2_COLOR);
          _pMietbeginn->selection_color(FL_SELECTION_COLOR);
          _pMietbeginn->labeltype(FL_NORMAL_LABEL);
          _pMietbeginn->labelfont(0);
          _pMietbeginn->labelsize(14);
          _pMietbeginn->labelcolor(FL_FOREGROUND_COLOR);
          _pMietbeginn->align(Fl_Align(FL_ALIGN_LEFT));
          _pMietbeginn->when(FL_WHEN_RELEASE);
        } // Fl_Input* _pMietbeginn
        { Fl_Box *pBox = new Fl_Box( _pMietbeginn->x() + _pMietbeginn->w() + 5, 
                                     _pMietbeginn->y(), 70, 25, "-Ende:");
          pBox->labelsize( 12 );
   
          _pMietende = new Fl_Input( _pJahreLaufzeit->x(), _pMietbeginn->y(), 100, 25);
          _pMietende->box(FL_PLASTIC_THIN_DOWN_BOX);
          _pMietende->color(FL_BACKGROUND2_COLOR);
          _pMietende->selection_color(FL_SELECTION_COLOR);
          _pMietende->labeltype(FL_NORMAL_LABEL);
          _pMietende->labelfont(0);
          _pMietende->labelsize(14);
          _pMietende->labelcolor(FL_FOREGROUND_COLOR);
          _pMietende->align(Fl_Align(FL_ALIGN_LEFT));
          _pMietende->when(FL_WHEN_RELEASE);
        } // Fl_Input* _pMietende
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(20, 226, 535, 69);
        o->box(FL_BORDER_BOX);
        o->color(FL_LIGHT2);
        { _pBtnRenditeOhneSteuer = new Fl_Button(26, 233, 239, 23, "Rendite ohne Steuer/AfA berechnen");
          _pBtnRenditeOhneSteuer->box(FL_GTK_UP_BOX);
          _pBtnRenditeOhneSteuer->down_box(FL_GTK_DOWN_BOX);
          _pBtnRenditeOhneSteuer->labelsize( 11 );
        } // Fl_Button* _pBtnRenditeOhneSteuer
        { _pBtnRenditeMitSteuer = new Fl_Button(26, 264, 239, 23, "Rendite mit Steuer/AfA berechnen");
          _pBtnRenditeMitSteuer->box(FL_GTK_UP_BOX);
          _pBtnRenditeMitSteuer->down_box(FL_GTK_DOWN_BOX);
          _pBtnRenditeMitSteuer->labelsize( 11 );
        } // Fl_Button* _pBtnRenditeMitSteuer
        { _pRenditeOhneSteuer = new Fl_Output(276, 232, 49, 25, "%");
          _pRenditeOhneSteuer->box(FL_PLASTIC_THIN_DOWN_BOX);
          _pRenditeOhneSteuer->align(Fl_Align(FL_ALIGN_RIGHT));
        } // Fl_Output* _pRenditeOhneSteuer
        { _pRenditeMitSteuer = new Fl_Output(276, 263, 49, 25, "%");
          _pRenditeMitSteuer->box(FL_PLASTIC_THIN_DOWN_BOX);
          _pRenditeMitSteuer->align(Fl_Align(FL_ALIGN_RIGHT));
        } // Fl_Output* _pRenditeMitSteuer
        { _pDummy4 = new Fl_Group(345, 232, 205, 45);
          _pDummy4->end();
          Fl_Group::current()->resizable(_pDummy4);
        } // Fl_Group* _pDummy4
        o->end();
      } // Fl_Group* o
      _pTopGrp->end();
    } // Fl_Group* _pTopGrp
    
    { _pBtnInListe = new Fl_Button(10, 319, 255, 23, "Vertrag in Liste \303\274""bernehmen");
      _pBtnInListe->box(FL_GTK_UP_BOX);
      _pBtnInListe->down_box(FL_GTK_DOWN_BOX);
      _pBtnInListe->labelsize( 12 );
    } // Fl_Button* _pBtnInListe
    { _pBtnVertragEdit = new Fl_Button(310, 319, 255, 23, "Vertrag bearbeiten");
      _pBtnVertragEdit->box(FL_GTK_UP_BOX);
      _pBtnVertragEdit->down_box(FL_GTK_DOWN_BOX);
      _pBtnVertragEdit->labelsize( 12 );
      _pBtnVertragEdit->deactivate();
    } // Fl_Button* _pBtnVertragEdit
    
    { _pBottomGrp = new Fl_Group(10, 350, 555, 225);
      _pBottomGrp->box(FL_BORDER_BOX);
      _pBottomGrp->color(FL_LIGHT2);
      { _pTable = new Flx_Table(12, 352, 551, 220);
        _pTable->box(FL_THIN_DOWN_FRAME);
        //_pTable->box( FL_PLASTIC_DOWN_FRAME );
        _pTable->color(FL_LIGHT2);
        _pTable->selection_color(FL_BACKGROUND_COLOR);
        _pTable->labeltype(FL_NORMAL_LABEL);
        _pTable->labelfont(0);
        _pTable->labelsize(11);
        _pTable->labelcolor(FL_FOREGROUND_COLOR);
        _pTable->row_header( 0 );
        _pTable->align(Fl_Align(FL_ALIGN_TOP));
        _pTable->when(FL_WHEN_RELEASE);
        _pTable->end();
        Fl_Group::current()->resizable(_pTable);
      } // Flx_Table* _pTable
      _pBottomGrp->end();
      Fl_Group::current()->resizable(_pBottomGrp);
    } // Fl_Group* _pBottomGrp
    o->end();
  } // Fl_Double_Window* o
  
  Vertraege vertraege;
  
  _pTable->setTableData( vertraege );
  w->show(argc, argv);
  return Fl::run();
}
